name: DEPLOY

on:
  pull_request:
    types:
      - closed
  workflow_dispatch:

env:
  AWS_REGION: us-west-2
    
jobs:
  deploy:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Build Custom AMI
        uses: hashicorp/packer-github-actions@master
        with:
          command: build
          target: us-west-2.pkr.hcl
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          PACKER_LOG: 1

      - name: Get Latest AMI ID
        id: get-ami-id
        run: |
          LATEST_AMI=$(aws ec2 describe-images \
            --filters "Name=is-public,Values=false" "Name=state,Values=available" \
            --query 'reverse(sort_by(Images, &CreationDate))[0].ImageId' \
            --output text)
          echo "LATEST_AMI=$LATEST_AMI" >> $GITHUB_ENV
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Get LaunchTemplateId
        id: get_launch_template_id
        run: |
          LAUNCH_TEMPLATE_ID=$(aws ec2 describe-launch-templates \
            --launch-template-names asg_launch_template \
            --query 'LaunchTemplates[].LaunchTemplateId' \
            --output text)
          echo "LAUNCH_TEMPLATE_ID=$LAUNCH_TEMPLATE_ID" >> $GITHUB_ENV
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_DEMO }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEMO }}

      - name: Create new Launch Template version
        id: create-launch-template-version
        run: |
          NEW_VERSION=$(aws ec2 create-launch-template-version \
            --launch-template-name asg_launch_template \
            --source-version '$Latest' \
            --version-description "AMI update $(date +%Y-%m-%d)" \
            --launch-template-data ImageId=${{ env.LATEST_AMI }} \
            --query 'LaunchTemplateVersion.VersionNumber' \
            --output text)
          echo "VERSION=$NEW_VERSION" >> $GITHUB_ENV
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_DEMO }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEMO }}
      
      - name: Update Autoscaling Group Use Latest Template Version
        run: |
          aws autoscaling update-auto-scaling-group \
            --auto-scaling-group-name csye6225-asg-spring2023 \
            --launch-template '{"LaunchTemplateName":"asg_launch_template", "Version":"$Latest"}'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_DEMO }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEMO }}

      - name: Trigger Instance Refresh
        run: |
          aws autoscaling start-instance-refresh \
            --auto-scaling-group-name csye6225-asg-spring2023 \
            --preferences MinHealthyPercentage=50,InstanceWarmup=60
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_DEMO }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEMO }}